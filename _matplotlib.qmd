---
title: "Visualization"
format: html
---

## Visualization
```{python}
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
```

```{python}
url = 'https://raw.githubusercontent.com/JoannaWuWeijia/Data_Store_WWJ/main/cleaning_data_rodent3.csv'

df = pd.read_csv(url)
```

### Introduction




### Matplotlib
Matplotlib is widely used because of its simplicity and effectiveness.

Matplotlib is a library designed for plotting and arranging data visually in Python, usually in twodimensional. It was created by Dr. John Hunter in 2003 to enable a MATLAB-like plotting interface in Python
Matplotlib is widely used because of its simplicity and effectiveness.

The library can be installed using either `pip` or `conda`. 

Type "pip install matplotlib" in your terminal

There are several types of graphs such as:
Lineplot
Scatterplot
Barplot
3D plot

#### Line Plot

Let's Start with an sample example: 
```{python}
t = range(0, 10) 
r = [i**2 for i in t]

plt.figure(figsize=(4, 4)) # Width and height in inches
plt.plot(t, r)
plt.title('Line Plot Example')
plt.xlabel('t value')
plt.ylabel('r value')
plt.grid(True)
plt.show()
```


```{python}
r2 = [i**3 for i in t]

plt.figure(figsize=(4, 4)) 

plt.plot(t, r, linestyle = '--', color = 'r', marker = 'o', label = 'r')
plt.plot(t, r2, linestyle = '-', color = 'b', marker = 'v', label = 'r2')

plt.title('Line Plot Example2')
plt.xlabel('t value')
plt.ylabel('r value')
plt.grid(True)
plt.show()
```

Let's use our rodent data to demonstrate the Monthly Reported data: 
```{python}
df['Created Date'] = pd.to_datetime(df['Created Date'])

df['Month'] = df['Created Date'].dt.to_period('M')
monthly_counts = df.groupby('Month').size()

plt.figure(figsize=(10, 8))
monthly_counts.plot(kind='line')
plt.title('Monthly Report Count')
plt.xlabel('Month')
plt.ylabel('Number of Reports')
plt.grid(True)
plt.xticks(rotation=45)
plt.show()
```

#### Scatter plot

```{python}
np.random.seed(8465);

x = np.random.uniform(0, 3, 10);
y = np.random.uniform(0, 3, 10);
z = np.random.uniform(0, 3, 10);

plt.scatter(x, y)
plt.xlabel('X')
plt.ylabel('Y')
plt.show()
```

#### Bar Plot
```{python}
borough_counts = df['Borough'].value_counts()

plt.figure(figsize=(10, 8))  
plt.bar(borough_counts.index, borough_counts.values, color='green')
plt.xlabel('Borough')  
plt.ylabel('Number of Rodent Sightings')  
plt.title('Rodent Sightings by Borough') 
plt.xticks(rotation=45)  # Rotate the X axis by 45 degrees to show the long labels
plt.show()
```

#### Multiple plots using subplots submodule
```{python}
df['Created Date'] = pd.to_datetime(df['Created Date'])
df['Date'] = df['Created Date'].dt.date
daily_reports = df.groupby(['Date', 'Incident Zip']).size().reset_index(name='Counts')
sample_zip = daily_reports['Incident Zip'].dropna().iloc[0]
sample_data = daily_reports[daily_reports['Incident Zip'] == sample_zip]

# 2x2 Plot
fig, axs = plt.subplots(2, 2, figsize=(10, 10))

# Line Plot
axs[0, 0].plot(sample_data['Date'], sample_data['Counts'], '-o', color='green')
axs[0, 0].set_title(f'Linear Plot of Reports for Zip {sample_zip}')
axs[0, 0].tick_params(labelrotation=45)

# Box Plot
axs[0, 1].boxplot(df['Y Coordinate (State Plane)'].dropna())
axs[0, 1].set_title('Boxplot of Y Coordinate')

# barplot
status_counts = df['Status'].value_counts()
axs[1, 0].bar(status_counts.index, status_counts.values, color='skyblue')
axs[1, 0].set_title('Barplot of Status Counts')
axs[1, 0].tick_params(labelrotation=45)

# histogram
axs[1, 1].hist(df['Latitude'].dropna(), bins=30, color='orange')
axs[1, 1].set_title('Histogram of Latitude')

plt.tight_layout()
plt.show()
```

#### More on Matplotlib
```{python}
help(plt.savefig)
```

```{python}
![additional arguments](https://drive.google.com/file/d/1j5T7_VMT1Nt4myukcmar0UMcZOHqurCk/view?usp=sharing)
```

### Pandas


#### Line Plot
```{python}
df['Community Districts'].value_counts().sort_index().plot(kind='line')
# Because the line plot is default in pandas plots, you can omit the (kind='line')
# The Series objectâ€™s index is passed to matplotlib for plotting on the x-axis
```

The following is showing several line plots in the same figure. 
```{python}
community_counts = df['Community Districts'].value_counts().sort_index()
city_council_counts = df['City Council Districts'].value_counts().sort_index()
police_precincts_counts = df['Police Precincts'].value_counts().sort_index()

counts_df = pd.DataFrame({
    'Community Districts': community_counts,
    'City Council Districts': city_council_counts,
    'Police Precincts': police_precincts_counts
})

counts_df = counts_df.fillna(0)
counts_df[['Community Districts', 'City Council Districts', 'Police Precincts']].plot() 
```

#### Bar Plot
```{python}
fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(15, 8))

# Vertical bar plot for Borough counts
df.groupby(['Borough']).size().plot.bar(ax=axs[0], color='skyblue', rot=0)
axs[0].set_title('Bar plot for Borough')

# Horizontal bar plot for Location Type counts
df.groupby(['Location Type']).size().plot.barh(ax=axs[1], color='lightgreen')
axs[1].set_title('Bar plot for Location Type')


plt.tight_layout()
plt.show()
```

#### Histogram

#### Density Plots


### Seaborn

XXXXX


### Conclusion
XXXX

## Reference 
#A useful Matplotlib cheatsheet from git: https://github.com/matplotlib/cheatsheets/blob/master/cheatsheets.tex 
# https://seaborn.pydata.org/generated/seaborn.kdeplot.html
